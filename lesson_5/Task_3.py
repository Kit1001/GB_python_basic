"""
Есть два списка:
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]


Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...

Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке klasses меньше элементов,
чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
('Станислав', None)

Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
 Подумать, в каких ситуациях генератор даст эффект.

"""

tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
classes = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]


def pair_gen(tutor_list, class_list):
    """
    Чтобы соблюсти условия задачи и выводить None в случае, если преподавателю не хватает класса из списка
    создаем копию списка классов и исключаем оттуда элементы методом .pop()
    """
    class_list_copy = class_list[:]
    for tutor in tutor_list:
        try:
            group = class_list_copy.pop()
        except IndexError:
            group = None
        yield tutor, group


pairs = pair_gen(tutors, classes)
print(type(pairs), '\n', *pairs)

# Уменьшаем список классов, чтобы убедиться, что условия задачи выполняются
classes = ['9А', '7В', '9Б']
pairs = pair_gen(tutors, classes)
print(type(pairs), '\n', *pairs)
