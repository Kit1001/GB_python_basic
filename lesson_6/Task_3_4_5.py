"""
Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом  — данные об их хобби.
Известно, что при хранении данных используется принцип: одна строка — один пользователь,
разделитель между значениями — запятая.
Написать код, загружающий данные из обоих файлов и формирующий из них словарь:
ключи — ФИО, значения — данные о хобби. Сохранить словарь в файл. Проверить сохранённые данные.
Если в файле, хранящем данные о хобби, меньше записей, чем в файле с ФИО, задаём в словаре значение None.
Если наоборот — выходим из скрипта с кодом «1».
При решении задачи считать, что объём данных в файлах во много раз меньше объема ОЗУ.

Решить задачу 3 для ситуации, когда объём данных в файлах превышает объём ОЗУ
(разумеется, не нужно реально создавать такие большие файлы, это просто задел на будущее проекта).
Только теперь не нужно создавать словарь с данными.
Вместо этого нужно сохранить объединенные данные в новый файл (users_hobby.txt).
Хобби пишем через двоеточие и пробел после ФИО:
Иванов,Иван,Иванович: скалолазание,охота
Петров,Петр,Петрович: горные лыжи

Решить задачу 4 и реализовать интерфейс командной строки,
чтобы можно было задать имя обоих исходных файлов и имя выходного файла. Проверить работу скрипта.


Комментарий:
Скрипт можно запустить как в IDE, так и в терминале. Без аргументов командной строки будут использоваться файлы
users.csv и hobby.csv, результат будет сохраняться в файл users_hobby.txt
"""

from sys import argv

# Проверка, есть ли аргументы командной строки
try:
    creds_file, hobby_file, result_file = argv[1], argv[2], argv[3]
except IndexError:
    creds_file, hobby_file, result_file = 'users.csv', 'hobby.csv', 'users_hobby.txt'

credentials = open(creds_file, 'r', encoding='utf-8')
hobby = open(hobby_file, 'r', encoding='utf-8')
result = open(result_file, 'w', encoding='utf-8')

# Читаем построчно файлы с ФИО и хобби, составляем из них строку для записи в файл с результатом работы скрипта
creds_line = credentials.readline().strip()
hobby_line = hobby.readline().strip()
while creds_line:           # Цикл будет работать пока в списке ФИО есть позиции
    if not hobby_line:      # Если в списке хобби кончились хобби - вместо них будет None
        hobby_line = None
    result.write(f'{creds_line}: {hobby_line}\n')
    creds_line = credentials.readline().strip()
    hobby_line = hobby.readline().strip()
credentials.close()
hobby.close()
result.close()
if hobby_line:              # Если в списке хобби их оказалось больше, чем позиций в списке ФИО - выходим с кодом 1
    exit(1)
